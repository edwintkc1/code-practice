// 雜題
// #67





#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
using namespace std;
#define LL long long

int n;

class hotel {                //hotel class
public:
	void change_room(char roomNumber[]) {
		strcpy(this->room, roomNumber);
	}
	void change_floor(char floorNumber[]) {
		strcpy(this->floor, floorNumber);
	}
	void change_price(int price) {
		this->price = price;
	}
	void change_status(int status) {
		this->status = status;
	}
	char* get_room() {
		return room;
	}
	char* get_floor() {
		return floor;
	}
	int get_price() {
		return price;
	}
	int get_status() {
		return status;
	}

private:
	char room[99];
	char floor[99];
	int price;
	int status;
};

bool compare(hotel h1, hotel h2) {
	if (h1.get_price() > h2.get_price())
		return true;
	else if (h1.get_price() == h2.get_price()) {
		int ret = strcmp(h1.get_room(), h2.get_room());
		if (ret > 0) {
			return true;
		}
	}
	return false;
}

void showHotel(hotel p[]) {
	for (int i = 0; i < n - 1; i++) {
		for (int j = 0; j < n - i - 1; j++) {
			if (compare(p[j], p[j + 1])) {  //return true if p[j]'s price > p[j+1]'s price
				hotel temp = p[j];            //if prices are equal, return true if p[j]'s room number > p[j+1]'s room number (use strcmp())
				p[j] = p[j + 1];
				p[j + 1] = temp;
			}
		}
	}
	cout << "All rooms in the hotel:\n";   //output the data of hotel
	for (int i = 0; i < n; i++) {
		cout << p[i].get_room() << " " << p[i].get_floor() << " " << p[i].get_price() << " " << p[i].get_status() << endl;
	}
	cout << endl;
}


int main() {
	cout << "Input the number of rooms:\n";
	cin >> n;   //already definded in the top, not defind here because we need to use it in showHotel()

	hotel* p = new hotel[n];   //create a hotel array p
	char roomNumber[99], floorNumber[99];
	int price, status;

	cout << "Input the information of rooms (room number, floor, price, status):\n";
	for (int i = 0; i < n; i++) {            //initialize hotel array p
		cin >> roomNumber >> floorNumber >> price >> status;
		p[i].change_room(roomNumber);
		p[i].change_floor(floorNumber);
		p[i].change_price(price);
		p[i].change_status(status);
	}
	cout << endl;
	showHotel(p);     //show the sorted hotel array p

	char instruction[99];
	int looptime = 0;
	while (1) {
		cout << "Input the instruction:\n";
		if (looptime == 0) {      // in first while loop, cin.getline will read one more char (\n) from the buffer
			cin.ignore();            // so cin.getline will not function in the first loop
			looptime++;          // debug here, ignore the \n  in the first loop 
		}
		cin.getline(instruction, 99);

		if (instruction[0] == 'B' || instruction[0] == 'R') {    // means instruction == Book roomX || Return roomX
			//we need to record the room number, so record everything after the space char, eg Return room3
			//so find the index of space first
			int space_index = 0;
			for (int i = 0; i < strlen(instruction); i++) {
				if (instruction[i] == ' ') {
					space_index = i;
					break;
				}
			}

			char room[10] = { 0 };  // for record the room number
			int x = 0;              //index for room variable

			for (int i = space_index + 1; i < strlen(instruction); i++) {  // record the room number from space_index to the end
				room[x] = instruction[i];                       //eg Book room1, we could store room1 into the variable
				x++;
			}

			if (instruction[0] == 'B') {
				for (int i = 0; i < n; i++) {
					if (strcmp(p[i].get_room(), room) == 0) {   //find the room first, then check its status
						if (p[i].get_status() == 0) {  // 0 means not available, 1 means the room is available
							cout << "Sorry, the room is not available. Try again.\n";
							break;
						}
						else {    // else the room is available (status == 1)
							p[i].change_status(0);   // change the status 
							cout << "Succeed!\n";
							break;
						}
					}
				}
				cout << endl;
				continue;
			}

			else if (instruction[0] == 'R') {
				for (int i = 0; i < n; i++) {
					if (strcmp(p[i].get_room(), room) == 0) {
						p[i].change_status(1);
						cout << "Thanks for using our services!\n";
						break;
					}
				}
				cout << endl;
				continue;
			}
		}

		else if (strcmp(instruction, " Leave") == 0) {
			cout << "See you again!" << endl;;
			break;
		}
		cout << endl;
	}

	delete[]p;

	return 0;
}



#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
using namespace std;
#define LL long long

bool is_palindrome(char input[]) {
	if (strlen(input) == 1)
		return false;

	char temp[21] = { 0 };  //eg. input[] = aba
	int index_temp = 0;
	for (int i = strlen(input) - 1; i >= 0; i--) {   //reverse the input[], and put it into temp[]
		temp[index_temp] = input[i];
		index_temp++;
	}
	int is_same = strcmp(input, temp); //return 0 if they are same
	if (is_same == 0) {
		return true;
	}
	return false;
}

bool compare(char r1[21], char r2[21]) {
	if (strlen(r1) > strlen(r2))
		return true;
	else {
		int ret = strcmp(r1, r2);
		if (ret > 0)
			return true;
	}
	return false;

}


void sortResult(char result[][21], int n) {
	for (int i = 0; i < n; i++) {               // use bubble sort here
		for (int j = 0; j < n - i - 1; j++) {
			if (compare(result[j], result[j+1])) {  // return true if result[j]'s length > result[j+1]'s length
				char temp[21] = { 0 };                   // if they have same size, return true if result[j] > result[j+1] by strcmp() function
				strcpy(temp, result[j]);                 // swap
				strcpy(result[j], result[j + 1]);
				strcpy(result[j + 1], temp);
			}
		}
	}
}

void showResult(char result[][21], int n) {
	if (n == 0) 
		cout << "There is no palindromic substring" << endl;   
	else {
		cout << "The result is:" << endl;
		for (int i = 0; i < n; i++) {
			cout << result[i] << endl;
		}
	}
}


int main() {
	char input[21];
	cout << "Please input a string:"<<endl;
	cin >> input;

	char result[100][21] = { 0 };             //this is the array to store all palindromic substr
	int result_index = 0;              
	int palindrome_count = 0;      //vairable to count how many palindromic substr

	// 1. create all possible substring
	// 2. check if they are palindromic substring by  is_palindrome() function
	// 3. if it is, put it into result array
	// 4. sort the result array by sortResult() function
	// 5. show the result by showResult() funciton

	for (int L = 0; L < strlen(input); L++) {         
		for (int R = L; R < strlen(input); R++) {
			int length = R - L + 1;
			int index_substr = 0;
			char substr[21] = { 0 };
			for (int i = L; i <= strlen(input) - length; i++) {
				substr[index_substr] = input[i];
				index_substr++;
			}

			if (is_palindrome(substr)) {             // return true if it is a palindrome substring
				strcpy(result[result_index], substr);  // put it into result array
				result_index++;
				palindrome_count++;  // count the number of palindromic substring
			}				
		}
	}
	sortResult(result, palindrome_count);
	showResult(result, palindrome_count);

	return 0;
}
