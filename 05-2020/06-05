// 雜題
// #67     2310 asm3 q2
Room Booking 
In this question, you will implement a simple room reservation system according to the following requirements: 
1.	Accept the information about the room, including the room number, floor, price and status. 
	The status records whether the room is available for booking.  
2.	List all the rooms and their corresponding information. The rooms should be sorted by the price in ascending order. 
	If two rooms have the same price, further sort them by their room numbers in ascending order. 
	There are only 3 floors in the building, which is from “Floor 1” to “Floor 3”. 
3.	Accept the input from the user. There are three kinds of tasks: 
•	Book a room: the user can input “Book” followed by a room number to book this room, e.g., 
	Book room1. If this room is unavailable (booked already), ask the user to input again. 
•	Return a room: the user can input “Return” followed by a room number to return this room,
	e.g., Return room1. We assume that the user does not return a room that is not booked yet. 
•	Leave: leave the hotel. 

Notes: 
1.	The hotel should be implemented as a C++ class using the name “hotel”.  
2.	The status of each room should be updated after a user booked or returned it.   
3.	All the data should be private. 
4.	The room number is “room” + an integer. To sort them, 
	you need to compare the name of two objects by the integer rather than directly comparing the two strings,
	e.g. “room11” > “room2” rather than “room11” < “room2”. 
5.	The input will contain the total amount of the rooms first. 
	Use dynamic array to store them, and delete the array before the program terminates.   
	
example is as follow
Input the number of rooms:  
9 
Input the information of rooms (room number, floor, price, status):  
room1 Floor1 320 0 
room2 Floor1 200 0
room3 Floor2 200 1 
room4 Floor3 200 1 
room5 Floor1 320 0 
room6 Floor3 400 1 
room7 Floor3 400 0 
room8 Floor2 150 1 
room9 Floor2 150 0 
 
All rooms in the hotel:  
room8 Floor2 150 1 
room9 Floor2 150 0 
room2 Floor1 200 0 
room3 Floor2 200 1    (sort the hotel room by price,if prices are same, sort them by smaller room number)
room4 Floor3 200 1 
room1 Floor1 320 0 
room5 Floor1 320 0 
room6 Floor3 400 1 
room7 Floor3 400 0 
 
Input the instruction:  
Book room1 
Sorry, the room is not available. Try again. 
 
Input the instruction:  
Book room3  
Succeed!  
 
Input the instruction:  
Return room3 
Thanks for using our services! 
     
Input the instruction: 
Leave 
See you again! 

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
using namespace std;
#define LL long long

int n;

class hotel {                //hotel class
public:
	void change_room(char roomNumber[]) {
		strcpy(this->room, roomNumber);
	}
	void change_floor(char floorNumber[]) {
		strcpy(this->floor, floorNumber);
	}
	void change_price(int price) {
		this->price = price;
	}
	void change_status(int status) {
		this->status = status;
	}
	char* get_room() {
		return room;
	}
	char* get_floor() {
		return floor;
	}
	int get_price() {
		return price;
	}
	int get_status() {
		return status;
	}

private:
	char room[99];
	char floor[99];
	int price;
	int status;
};

bool compare(hotel h1, hotel h2) {
	if (h1.get_price() > h2.get_price())
		return true;
	else if (h1.get_price() == h2.get_price()) {
		int ret = strcmp(h1.get_room(), h2.get_room());
		if (ret > 0) {
			return true;
		}
	}
	return false;
}

void showHotel(hotel p[]) {
	for (int i = 0; i < n - 1; i++) {
		for (int j = 0; j < n - i - 1; j++) {
			if (compare(p[j], p[j + 1])) {  //return true if p[j]'s price > p[j+1]'s price
				hotel temp = p[j];            //if prices are equal, return true if p[j]'s room number > p[j+1]'s room number (use strcmp())
				p[j] = p[j + 1];
				p[j + 1] = temp;
			}
		}
	}
	cout << "All rooms in the hotel:\n";   //output the data of hotel
	for (int i = 0; i < n; i++) {
		cout << p[i].get_room() << " " << p[i].get_floor() << " " << p[i].get_price() << " " << p[i].get_status() << endl;
	}
	cout << endl;
}


int main() {
	cout << "Input the number of rooms:\n";
	cin >> n;   //already definded in the top, not defind here because we need to use it in showHotel()

	hotel* p = new hotel[n];   //create a hotel array p
	char roomNumber[99], floorNumber[99];
	int price, status;

	cout << "Input the information of rooms (room number, floor, price, status):\n";
	for (int i = 0; i < n; i++) {            //initialize hotel array p
		cin >> roomNumber >> floorNumber >> price >> status;
		p[i].change_room(roomNumber);
		p[i].change_floor(floorNumber);
		p[i].change_price(price);
		p[i].change_status(status);
	}
	cout << endl;
	showHotel(p);     //show the sorted hotel array p

	char instruction[99];
	int looptime = 0;
	while (1) {
		cout << "Input the instruction:\n";
		if (looptime == 0) {      // in first while loop, cin.getline will read one more char (\n) from the buffer
			cin.ignore();            // so cin.getline will not function in the first loop
			looptime++;          // debug here, ignore the \n  in the first loop 
		}
		cin.getline(instruction, 99);

		if (instruction[0] == 'B' || instruction[0] == 'R') {    // means instruction == Book roomX || Return roomX
			//we need to record the room number, so record everything after the space char, eg Return room3
			//so find the index of space first
			int space_index = 0;
			for (int i = 0; i < strlen(instruction); i++) {
				if (instruction[i] == ' ') {
					space_index = i;
					break;
				}
			}

			char room[10] = { 0 };  // for record the room number
			int x = 0;              //index for room variable

			for (int i = space_index + 1; i < strlen(instruction); i++) {  // record the room number from space_index to the end
				room[x] = instruction[i];                       //eg Book room1, we could store room1 into the variable
				x++;
			}

			if (instruction[0] == 'B') {
				for (int i = 0; i < n; i++) {
					if (strcmp(p[i].get_room(), room) == 0) {   //find the room first, then check its status
						if (p[i].get_status() == 0) {  // 0 means not available, 1 means the room is available
							cout << "Sorry, the room is not available. Try again.\n";
							break;
						}
						else {    // else the room is available (status == 1)
							p[i].change_status(0);   // change the status 
							cout << "Succeed!\n";
							break;
						}
					}
				}
				cout << endl;
				continue;
			}

			else if (instruction[0] == 'R') {
				for (int i = 0; i < n; i++) {
					if (strcmp(p[i].get_room(), room) == 0) {
						p[i].change_status(1);
						cout << "Thanks for using our services!\n";
						break;
					}
				}
				cout << endl;
				continue;
			}
		}

		else if (strcmp(instruction, " Leave") == 0) {
			cout << "See you again!" << endl;;
			break;
		}
		cout << endl;
	}

	delete[]p;

	return 0;
}
----------------------------------------------------------------------------------------------------------------------
// 雜題
// #68     2310 asm3 q1
// palindromic substring
// ouput all palindromic substr, and sort them by strcmp()

A palindrome is a word or number, which reads the same backward as forward. 
For example, madam, abcdcba, and 120021 are all palindromes. 
 
Given a string, if it has palindromic substring(s) of the length greater than one, 
print all such palindromic substrings in an increasing order according to their lengths.
If two substring have the same length, further sort them using the stringCompare() 
following an increasing order. If this string does not have a palindromic substring, 
print “There is no palindromic substring”. 

•	The length of one string is defined as the number of characters of this string, 
	e.g., the length of “abcd123” is 7. 
	
•	A substring of one string is part of consecutive characters from this string. 
	For example, for string “abcdef”, “abc” is one substring, but “abd” is not 
	(because these three characters are not consecutive in the original string). 
	
•	The string itself is also considered as its substring.  
 
For example, if the input is madam, it has two palindromic substrings ada and madam. 
Then your program should output ada, then madam. 
 
Notes: 
1.	Assume the size of the input string is no more than 20. 
2.	You can obtain all the palindromic substrings first and store them in one char-type pointer array,
	e.g., char *strs[]. Then, you can further sort these substrings. 
3.	You can NOT include the <string> library. 


#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
using namespace std;
#define LL long long

bool is_palindrome(char input[]) {
	if (strlen(input) == 1)
		return false;

	char temp[21] = { 0 };  //eg. input[] = aba
	int index_temp = 0;
	for (int i = strlen(input) - 1; i >= 0; i--) {   //reverse the input[], and put it into temp[]
		temp[index_temp] = input[i];
		index_temp++;
	}
	int is_same = strcmp(input, temp); //return 0 if they are same
	if (is_same == 0) {
		return true;
	}
	return false;
}

bool compare(char r1[21], char r2[21]) {
	if (strlen(r1) > strlen(r2))
		return true;
	else {
		int ret = strcmp(r1, r2);
		if (ret > 0)
			return true;
	}
	return false;

}


void sortResult(char result[][21], int n) {
	for (int i = 0; i < n; i++) {               // use bubble sort here
		for (int j = 0; j < n - i - 1; j++) {
			if (compare(result[j], result[j+1])) {  // return true if result[j]'s length > result[j+1]'s length
				char temp[21] = { 0 };                   // if they have same size, return true if result[j] > result[j+1] by strcmp() function
				strcpy(temp, result[j]);                 // swap
				strcpy(result[j], result[j + 1]);
				strcpy(result[j + 1], temp);
			}
		}
	}
}

void showResult(char result[][21], int n) {
	if (n == 0) 
		cout << "There is no palindromic substring" << endl;   
	else {
		cout << "The result is:" << endl;
		for (int i = 0; i < n; i++) {
			cout << result[i] << endl;
		}
	}
}


int main() {
	char input[21];
	cout << "Please input a string:"<<endl;
	cin >> input;

	char result[100][21] = { 0 };             //this is the array to store all palindromic substr
	int result_index = 0;              
	int palindrome_count = 0;      //vairable to count how many palindromic substr

	// 1. create all possible substring
	// 2. check if they are palindromic substring by  is_palindrome() function
	// 3. if it is, put it into result array
	// 4. sort the result array by sortResult() function
	// 5. show the result by showResult() funciton

	for (int L = 0; L < strlen(input); L++) {         
		for (int R = L; R < strlen(input); R++) {
			int length = R - L + 1;
			int index_substr = 0;
			char substr[21] = { 0 };
			for (int i = L; i <= strlen(input) - length; i++) {
				substr[index_substr] = input[i];
				index_substr++;
			}

			if (is_palindrome(substr)) {             // return true if it is a palindrome substring
				strcpy(result[result_index], substr);  // put it into result array
				result_index++;
				palindrome_count++;  // count the number of palindromic substring
			}				
		}
	}
	sortResult(result, palindrome_count);
	showResult(result, palindrome_count);

	return 0;
}
