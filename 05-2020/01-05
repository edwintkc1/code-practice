#include <iostream>
#include <fstream>
#include <string>
using namespace std;
#define LL long long

void readFile(const string& filename) {
	ifstream in(filename);
	if (in.fail()) {
		cout << "The file cannot be found!" << endl;
		return;
	}
	ofstream out("lab13_output.txt"); //create a output stream, object is out. create a txt named lab13_output.txt;
	int n, phone, sid;
	char temp[1000];
	in >> n;
	char x;   // put a '\0' in the current line
	in >> x;  // in order to skip to next line
	for (int i = 1; i <= n; i++) {
		in.getline(temp,100);
		out << "Student " << i << ":" << endl;
		out << "Name: ";
		int j = 0;
		while (temp[j] != ',') {
			out << temp[j];
			j++;                    // j is pointing to the comma
		}    //6 
		     //LAW Ching Nam Morris, 91376218 50001234
		j+=2;                     // we need to skip the comma, point to the first number 9, so +=2
		out << endl << "Student ID: ";
		while (temp[j] != ' ') {
			out << temp[j];
			j++;
		}
		j ++;
		out << endl << "Tel: ";
		while (temp[j] != '\0') {
			out << temp[j];
			j++;
		}
		out << endl << endl;
	}
	in.close();
	out.close();
}


int main() {
	string filename = "lab13.txt";
	readFile(filename);

	return 0;
}



#include <iostream>
using namespace std;
#define LL long long

void merge(int arr[], int first, int mid, int last) {
	int size = last - first + 1;
	int* temp = new int[size];
	int i = first;
	int j = mid + 1;
	int k = 0;
	while (i <= mid && j <= last) {    
		if (arr[i] > arr[j]) {
			temp[k] = arr[j];
			k++;
			j++;
		}
		else {
			temp[k] = arr[i];
			k++;
			i++;
		}
	}
	//if one of the array comes to end, 
	//then forget that array, just put all elements in another array into the merge array
  //if the first array comes to the end
	while (j <= last) {
		temp[k] = arr[j];
		k++;
		j++;
	}
	
  //if the second array comes to the end
	while (i <= mid) {
		temp[k] = arr[i];
		k++;
		i++;
	}
	
	for (int i = 0; i < k; i++) {
		arr[first + i] = temp[i];
	}
	delete[]temp;
}

void mergeSort(int arr[], int first, int last) {
	if (first >= last)     //base condition, the subarray has only 1 element (considered it is a sorted array)
		return;
	int mid = (first + last) / 2;
	mergeSort(arr, first, mid);
	mergeSort(arr, mid + 1, last);
	merge(arr, first, mid, last);
}

int main() {
	cout << "Enter the size of the array:" << endl;
	int n;
	cin >> n;
	int* arr = new int[n];
	cout << "Enter the content of the array:" << endl;
	for (int i = 0; i < n; i++) {
		cin >> arr[i];
	}
	mergeSort(arr, 0, n - 1);

	cout << "The sorted array is:" << endl;
	for (int i = 0; i < n; i++) {
		cout << arr[i] << " ";
	}
	cout << endl;
	return 0;
}
