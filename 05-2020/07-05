----------------------------------------------------------------------------------------------------------------------
// 雜題
// #69      2310 asm3 q3
// create a linked list to store int data, also need to sort data in ascending order



#include <iostream>
using namespace std;
#define LL long long

class node {
public:
	int data;
	node* next;
};

void remove(node* root) {
	node* now = root;          // current node
	node* temp_next = NULL; // next node
	node* temp = NULL;  // for storing data
	while (now != NULL && now->next != NULL) {  
		temp_next = now;
		while (temp_next->next != NULL) {
			if (now->data == temp_next->next->data) {
				temp = temp_next->next;
				temp_next->next = temp_next->next->next;
				delete(temp);
			}
			else
				temp_next = temp_next->next;
		}
		now = now->next;
	}
}

void sort(node* root) {
	int swapped;
	node* now;
	node* next = NULL;
	do {
		swapped = 0;
		now = root;
		while (now->next != next) {
			if (now->data   >   now->next->data) {  // compare 2 data, swap them if head->data  >  next->data
				int temp = now->data;
				now->data = now->next->data;
				now->next->data = temp;

				swapped = 1;
			}
			now = now->next;   // update head's current address
		}
		next = now;     
	} while (swapped);
}

void add(node** root, int x) {
	node* temp = new node;
	temp->data = x;          
	temp->next = *root;
	*root = temp;
}

node* toList(int arr[],int size) {
	node* root = NULL;          // create linked list's head
	for (int i = 0; i < size; i++) { // add all the elements into the list
		add(&root, arr[i]);
	}
	return root;
}

node* merge(node* list1, node* list2) {
	node* ret = NULL;
	if (list1 == NULL)     // when its address == NULL means no more elements
		return list2;        
	if (list2 == NULL)
		return list1;
	if (list1->data < list2->data) {
		ret = list1;         // use recursion to merge
		ret->next = merge(list1->next, list2);
	}
	else {
		ret = list2;
		ret->next = merge(list1, list2->next);
	}
	return ret;
}

void output(node *p) {
	while (p != NULL) {
		cout << p->data << " ";
		p = p->next;
	}
	cout << endl;
}

int main() {
	//1. ask user to input the size of two array, and the data of each element
	//2. convert the two array to linked list
	//3. remove the duplicate elements in two unsorted linked list
	//4. sort two linked list
	//5. merge them into one linked list
	//6. sort the result linked list
	//7. output result
	int size1, size2;
	cout << "Please input the count of the numbers:" << endl;
	cin >> size1 >> size2;
	int* arr1 = new int[size1];
	int* arr2 = new int[size2];

	cout << "Please input the content of the numbers of first linked list:" << endl;
	for (int i = 0; i < size1; i++) {
		cin >> arr1[i];
	}
	cout << "Please input the content of the numbers of second linked list:" << endl;
	for (int i = 0; i < size2; i++) {
		cin >> arr2[i];
	}

	// step 2 convert two array into two linked list
	node* list1 = toList(arr1, size1);
	node* list2 = toList(arr2, size2);

	// step 3 remove duplicated element
	remove(list1);
	remove(list2);

	// step 4 sort it
	sort(list1);
	sort(list2);

	// step 5 merge two linked list into one
	node* result = merge(list1, list2);

	// step 6 remove duplicated elements in the result linked list
	remove(result);

	cout << "The merged linked list is: ";
	output(result);
	return 0;
}



#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
using namespace std;
#define LL long long

void count(int start, int product, int num, int &result) {
	if (start > num || product > num)   // base case
		return;
	if (product == num) {  // if product is equals to num after recursion
		result++;                // means the product is mutipled by num's factors 
		return;                   // so it is one of the combination, increase the result by 1
	}

	for (int i = start; i < num; i++) {    
		if (i * product > num) 
			break;                     

		if (num % i == 0) { // if num % i == 0, means i   is a factor of num
			count(i, i * product, num, result);  // call the function again, but change the product by i*porduct
		}                                                          // also change the start variable by current i
	}
}


int main() {
	int num;
	cout << "Please input the number:";
	cin >> num;

	int result = 1;
	count(2, 1, num, result);
	cout << "The amount of possible combinations is " << result;

	return 0;
}

