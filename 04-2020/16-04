// codeforces 165A
// #56
// central point in Cartesian coordiante system.
// we consider a point is a central point, if it is surrounded by 4 points.
// ie. (0,0) is a central point, surrounded by (-1,0), (1,0), (0,1), (0,-1)
// now input n coordinate, figure out if there are any central point there
// ouput how many central point(s)

// learn 2 dimensional vector，學到2維vector構造方法
// focus on single coordiante each time, test all the other coordiante
// see if there are any point on left,right,up,down
// if 4 direction both have points
// means it is a central point, cnt ++

#include <iostream>
#include <vector>
using namespace std;
#define LL long long

int main() {
	int n;
	cin >> n;
	vector<vector<int>> v(n,vector<int>(2));
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < 2; j++) {
			cin >> v[i][j];
		}
	}
	int cnt = 0;
	for (int i = 0; i <n; i++) {
		int x = v[i][0];
		int y = v[i][1];
		int up = 0, down = 0, right = 0, left = 0;
		for (int j = 0; j <n; j++) {
			if (v[j][0] == x && v[j][1] > y)
				up++;
			else if (v[j][0] == x && v[j][1] < y)
				down++;
			else if (v[j][1] == y && v[j][0] > x)
				right++;
			else if (v[j][1] == y && v[j][0] < x)
				left++;
		}
		if (up != 0 && down != 0 && right != 0 && left != 0)
			cnt++;
	}
	cout << cnt;

	return 0;
}
----------------------------------------------------------------------------------------------------------------------
// codeforces 139A
// #57
// read a book. Tom will read a book with n pages everyday.
// he reads x1 pages in Monday, x2 pages in Tuesday, x3 pages in Wednesday.....etc
// now input n, and 7 numbers indicate the pages read in each day.
// output in which weekday he could finish the book
// input: 100
	  15 20 20 15 10 30 45
// output:6


#include <iostream>
using namespace std;
#define LL long long

int main() {
	int n;
	cin >> n;
	int pages[7];
	for (int i = 0; i < 7; i++)
		cin >> pages[i];

	int day = 0;
	while (n > 0) {
		n -= pages[day % 7];
		if(n>0)
			day++;
	}
	day += 1;
	cout << ((day%7) == 0 ? 7 : day % 7);

	return 0;
}
----------------------------------------------------------------------------------------------------------------------
// codeforces 34A
// #58
// input n height of man, if the height difference of neiboring man is minimum, output their index
// they stand in a circle, means that the last one could compare with the first one
// input: 5
	  10 12 13 15 10
// output:5 1

// just use loop to update the mim value
// be reminded that need to use % operator
// and need to add one to both indices at the end
// because index start from 0, not start from 1

#include <iostream>
#include <vector>
using namespace std;
#define LL long long

int main() {
	int n;
	cin >> n;
	vector<int> v;
	for (int i = 0; i < n; i++){
		int x;
		cin >> x;
		v.push_back(x);
	}
	int min = INT_MAX;
	int index1, index2;
	for (int i = 0; i < n; i++) {
		if (abs(v[i] - v[(i + 1)%n]) < min) {
			min = abs(v[i] - v[(i + 1)%n]);
			index1 = i;
			index2 = i + 1;
		}
	}

	cout << (index1+1 == n? n : (index1+1)%n) << " " << (index2 + 1 == n ? n : (index2 + 1) % n);
	return 0;
}
----------------------------------------------------------------------------------------------------------------------
// codeforces 318A
// #59

#include <iostream>
using namespace std;
#define LL long long

int main() {
	LL n, m, ans;
	cin >> n >> m;
	if (m <= (n+1) / 2) {
		ans = 2 * m - 1;
	}
	else
		ans = (m - (n+1) / 2) * 2;
	cout << ans;
	return 0;
}
----------------------------------------------------------------------------------------------------------------------
// codeforces 318A
// #59
