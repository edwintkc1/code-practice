// 雜題
// #62
// class, area of triangle

#include <iostream>
#include <cmath>
using namespace std;
#define LL long long
 
class Triangle {
private:
    int side1;
    int side2;
    int side3;
    double area;
    void computeArea();
 
public:
    Triangle();
    Triangle(int, int, int);
    void setSides(int, int, int);
    double getArea();
};
Triangle::Triangle() {
    this->side1 = 0;
    this->side2 = 0;
    this->side3 = 0;
    computeArea();
}
Triangle::Triangle(int a, int b, int c) {
    this->side1 = a;
    this->side2 = b;
    this->side3 = c;
    computeArea();
}
void Triangle::computeArea() {
    double s = 0.5 * (side1 + side2 + side3);
    this->area = sqrt(s * (s - side1) * (s - side2) * (s - side3));
}
void Triangle::setSides(int a, int b, int c) {
    this->side1 = a;
    this->side2 = b;
    this->side3 = c;
    computeArea();
}
double Triangle::getArea() {
    return area;
}
 
int main() {
    Triangle triangle1, triangle2(3,4,5);
    cout << "Area of Triangle (i.e. triangle1): " << triangle1.getArea() << endl;
    cout << "Area of Triangle (i.e. triangle2 with sides 3, 4 and 5): " << triangle2.getArea() << endl;
    int a, b, c;
    cout << "Enter New Sides for Triangle: " << endl;
    cin >> a >> b >> c;
    triangle1.setSides(a, b, c);
    cout << "Area of Triangle: " << triangle1.getArea();
    return 0;
}
----------------------------------------------------------------------------------------------------------------------
// 雜題
// #63
// class practice, sort class by month, day, balance

#include <iostream>
using namespace std;
#define LL long long

class Record {
private:
	int month;
	int day;
	double bal;
public:
	void set(int mon, int day, double bal) {
		this->month = mon;
		this->day = day;
		this->bal = bal;
	}
	int getMon() { return month; }
	int getDay() { return day; }
	double getBal() { return bal; }
};

bool compare(Record r1, Record r2) {
	if (r1.getMon() > r2.getMon())
		return true;
	else if (r1.getMon() == r2.getMon() && r1.getDay() > r2.getDay())
		return true;
	else if (r1.getMon() == r2.getMon() && r1.getDay() == r2.getDay() && r2.getBal() > r1.getBal())
		return true;

	return false;
}

int main() {
	Record arr[30];
	int mon, day;
	double bal;
	int size;
	cout << "Enter the number of the records: ";
	cin >> size;
	cout << "Enter the contents of each records: " << endl;
	for (int i = 0; i < size; i++) {
		cin >> mon >> day >> bal;
		arr[i].set(mon, day, bal);
	}

	cout << "Sort according to the balance: " << endl;
	for (int i = 0; i < size - 1; i++) {
		for (int j = 0; j < size - i - 1; j++) {
			if (arr[j].getBal() > arr[j+1].getBal()) {
				Record temp = arr[j];
				arr[j] = arr[j + 1];
				arr[j + 1] = temp;
			}
		}
	}
	for (int i = 0; i < size; i++) {
		cout << arr[i].getMon() << " " << arr[i].getDay() << " " << arr[i].getBal();
		cout << endl;
	}

	cout << "Sort according to the time:" << endl;
	for (int i = 0; i < size - 1; i++) {
		for (int j = 0; j < size - i - 1; j++) {
			if (compare(arr[j] , arr[j+1])) {
				Record temp = arr[j];
				arr[j] = arr[j + 1];
				arr[j + 1] = temp;
			}
		}
	}
	for (int i = 0; i < size; i++) {
		cout << arr[i].getMon() << " " << arr[i].getDay() << " " << arr[i].getBal();
		cout << endl;
	}

	return 0;
}
