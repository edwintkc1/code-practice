// 雜題
// #30

#include <iostream>
using namespace std;

void swap(int** course,  int row) {
	int temp[2] = { 0 };                                //create a temp array for swap
	for (int i = 0; i < 2; i++) 
		temp[i] = course[row][i];

	for (int i = 0; i < 2; i++)
		course[row][i] = course[row + 1][i];

	for (int i = 0; i < 2; i++)
		course[row + 1][i] = temp[i];
}

void sortByEnd(int **course, int number) {
	//use bubble sort
	for (int x = 0; x < number - 1; x++) 
		for (int i = 0; i < number - 1 - x; i++) 
			if (course[i][1] > course[i + 1][1])
				swap(course, i);
}


int main() {
	// 1. sort the intervals by end value
	// 2. iterate intervals one by one
	// 3. if interval overlap, count ++ (indicates that we need to delte this interval)
	// 4. finally we have how many intervals we need to delete to make no overlapping interval (count)
	// 5. number of courses - count = ans

	
	int number = 0;                //number of courses
	cout << "Input the number of the courses:\n";
	cin >> number;
	int** course = new int* [number];
	for (int i = 0; i < number; i++)
		course[i] = new int [2];

	cout << "Input the starting time and the ending time for each course:\n";
	for (int i = 0; i < number; i++) {
		for (int j = 0; j < 2; j++)
			cin >> course[i][j];
	}
	cout << "\n";
	sortByEnd(course, number);

	for (int i = 0; i < number; i++) {
		for (int j = 0; j < 2; j++)
			cout << course[i][j] << " ";
		cout << endl;
	}

	return 0;
}

//6
//2 3
//1 9
//3 5
//1 7
//4 6
//6 8

//8
//0 10
//3 4
//2 8
//1 5
//4 5
//4 8
//5 6
//7 9

//7
//2 5
//5 8
//1 3
//2 5
//7 9
//5 8
//4 6






#include <iostream>
using namespace std;

void swap(int **course,  int row) {
	int temp[2] = { 0 };                                //create a temp array for swap
	for (int i = 0; i < 2; i++) 
		temp[i] = course[row][i];

	for (int i = 0; i < 2; i++)
		course[row][i] = course[row + 1][i];

	for (int i = 0; i < 2; i++)
		course[row + 1][i] = temp[i];
}

void sortByEnd(int **course, int number) {
	//use bubble sort
	for (int i = 0; i < number - 1; i++) 
		for (int j = 0; j < number - 1 - j; i++) 
			if (course[j][1] > course[j + 1][1])
				swap(course, j);
}

//bool overlap(int endTime1, int endTime2) {
//	endTime
//}


int main() {
	// 1. sort the intervals by end value
	// 2. iterate intervals one by one
	// 3. if interval overlap, count ++ (indicates that we need to delte this interval)
	// 4. finally we have how many intervals we need to delete to make no overlapping interval (count)
	// 5. number of courses - count = ans

	
	int number = 0;                //number of courses
	cout << "Input the number of the courses:\n";
	cin >> number;
	int** course = new int* [number];
	for (int i = 0; i < number; i++)
		course[i] = new int [2];

	cout << "Input the starting time and the ending time for each course:\n";
	for (int i = 0; i < number; i++) {
		for (int j = 0; j < 2; j++)
			cin >> course[i][j];
	}
	cout << "\n";
	sortByEnd(course, number);

	for (int i = 0; i < number; i++) {
		for (int j = 0; j < 2; j++)
			cout << course[i][j] << " ";
		cout << endl;
	}

	//int deleted = 0, lastValidIntervalIndex = 0;
	//for (int i = 0; i < number; i++) {
	//	if (overlap(course[i][1], course[i + 1][0]))   // send endTime of first interval, and start time of second interval into overlap function
	//		deleted++;                                              // compare, if overlap, consider the second interval will be deleted
	//	else
	//		lastValidIntervalIndex = i;
	//}

	//for (int i = 0; i < number; i++) {
	//	if (number == 5)
	//		break;
	//	cout << course[i][1] << " " << course[i + 1][0] << endl;

	//}

	return 0;
}

//6
//2 3
//1 9
//3 5
//1 7
//4 6
//6 8

//8
//0 10
//3 4
//2 8
//1 5
//4 5
//4 8
//5 6
//7 9

//7
//2 5
//5 8
//1 3
//2 5
//7 9
//5 8
//4 6
