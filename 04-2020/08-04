// leetcode 435
// #30
// maximum non-overlapping intervals.
// input: 6
	  2 3
	  1 9
	  3 5
	  1 7
	  4 6
	  6 8
// output:There are 3 classes that can be scheduled for the same classroom.
// input: 8
	  0 10
	  3 4
	  2 8
	  1 5
	  4 5
	  4 8
	  5 6
	  7 9
// output:There are 4 classes that can be scheduled for the same classroom.
// input: 7
	  2 5
	  5 8
	  1 3
	  2 5
	  7 9
	  5 8
	  4 6
// output:There are 3 classes that can be scheduled for the same classroom.

#include <iostream>
using namespace std;

void swap(int** course, int row) {
	int temp[2] = { 0 };                                //create a temp array for swap
	for (int i = 0; i < 2; i++)
		temp[i] = course[row][i];

	for (int i = 0; i < 2; i++)
		course[row][i] = course[row + 1][i];

	for (int i = 0; i < 2; i++)
		course[row + 1][i] = temp[i];
}

void sortByEnd(int** course, int number) {
	//use bubble sort
	for (int i = 0; i < number - 1; i++)
		for (int j = 0; j < number - 1 - i; j++)
			if (course[j][1] > course[j + 1][1])               //compare the endTime of each interval
				swap(course, j);                                      
}

bool overlap(int startTime, int endTime) {
	return (startTime < endTime ? true : false);
}

int main() {
	// 1. sort the intervals by end value
	// 2. iterate intervals one by one
	// 3. if interval overlap, count ++ (indicates that we need to delte this interval)
	// 4. finally we have how many intervals we need to delete to make no overlapping interval (count)
	// 5. number of courses - count = ans

	int number = 0;                //number of courses
	cout << "Input the number of the courses:\n";
	cin >> number;
	int** course = new int* [number];      //create course array
	for (int i = 0; i < number; i++)
		course[i] = new int[2];

	cout << "Input the starting time and the ending time for each course:\n";
	for (int i = 0; i < number; i++) {              //assign value
		for (int j = 0; j < 2; j++)
			cin >> course[i][j];
	}

	sortByEnd(course, number);                 //sort algorithm

	int deleted = 0, lastValidIntervalIndex = 0;
	for (int i = 1; i < number; i++) {
		if (overlap(course[i][0], course[lastValidIntervalIndex][1]))   // send start time of second interval, and end time of first interval into overlap function
			deleted++;                                              // compare, if overlap, consider the second interval will be deleted
		else
			lastValidIntervalIndex = i;
	}

	cout << "There are " << number - deleted << " classes that can be scheduled for the same classroom.";
	return 0;
}
