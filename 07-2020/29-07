初識多態 Polymorphism
Creating a computer 

#include <iostream>
#include <string>
using namespace std;

class CPU                          //父類
{
public:
	virtual void calculate() = 0;    //虛函數
};

class VideoCard
{
public:
	virtual void display() = 0;
};

class Memory
{
public:
	virtual void storage() = 0;
};
	
class IntelCPU : public CPU        //子類
{
public:
	void calculate() {
		cout << "Intel CPU is calculating\n";
	}
};

class IntelVideoCard :public VideoCard
{
public:
	void display() {
		cout << "Intel VideoCard is displaying\n";
	}
};

class IntelMemory :public Memory
{
public:
	void storage() {
		cout << "Intel MemoryCard is storing\n";
	}
};  
  
class Computer             //computer class
{
public:
	Computer(CPU* cpu, VideoCard* vc, Memory* mem) {    //computer constructor, with arguments
		m_cpu = cpu;
		m_vc = vc;
		m_mem = mem;
	}

	void Work() {
		m_cpu->calculate();
		m_vc->display();
		m_mem->storage();
	}

	~Computer() {
		if (m_cpu != NULL) {
			delete m_cpu;
			m_cpu = NULL;
		}
		if (m_vc != NULL) {
			delete m_vc;
			m_vc = NULL;
		}
		if (m_mem != NULL) {
			delete m_mem;
			m_mem = NULL;
		}
	}
private:
	CPU* m_cpu;
	VideoCard* m_vc;
	Memory* m_mem;
};

void test01() {
	CPU* intelcpu = new IntelCPU;         //父類指針指向子類對象
	Memory* intelmem = new IntelMemory;
	VideoCard* intelvc = new IntelVideoCard;
	Computer *computer1 = new Computer(intelcpu, intelvc, intelmem);    //創建computer，傳入3個objects的pointer
	computer1->Work();
	delete computer1;

}

int main() {
	test01();

	return 0;
}
