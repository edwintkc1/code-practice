// 雜題
// #17
// intput odd number and print a cross shape just like the this one --> X

#include <iostream>
using namespace std;

int main() {
	int N;
	cout << "Please input the integer N: ";
	cin >> N;
	while (N <= 1 || N % 2 == 0) {
		cout << "Please input the integer N: ";
		cin >> N;
	}
	int columnMidPoint = N;  // 7
	int rowMidPoint = (N + 1) / 2;  // 4  
	int row = N * 2 + 1;
	for (int i = 1; i <= rowMidPoint; i++) { 	//an upper part with the shape of ‘V’ except the central point 
		for (int j = 1; j <= 2 * N - 1; j++) {
			if (i < rowMidPoint) {
				if (2 * i - 1 == j || row - 2 * i == j)
					cout << "*";
				else
					cout << " ";
			}
			if (i == rowMidPoint) {  	//the central point
				if (j == columnMidPoint)
					cout << "*";
				else
					cout << " ";
			}
		}
		cout << endl;
	}
	// a lower part with the shape of ‘Ʌ’ except the central point
	for (int i = 1; i <= rowMidPoint - 1; i++) {
		for (int j = 1; j <= 2 * N - 1; j++) {
			if (j == N - 2 * i || j == N + 2 * i)
				cout << "*";
			else
				cout << " ";
		}
		cout << endl;
	}
		return 0;
}
----------------------------------------------------------------------------------------------------------------------
// 雜題
// #18
// Five in a row/ Gomuku/ Gobang /五子棋

#include <iostream>
using namespace std;

int main() {
	int player = 1;     // 1 means player1 is playing; 2 means player2 is playing
	int const m = 5; // size of the chessboard
	int chessboard[m][m] = { 0 }; // initial value--0; player1's ID--1; player2's ID--2
	int x, y; // input position from one player; x is row and y is column

	//Initialize chessboard and print it
	cout << "Game starts:" << endl;
	for (int i = 0; i < 5; i++) {
		for (int j = 0; j < 5; j++)
			cout << chessboard[i][j];
		cout << endl;
	}
	cout << endl;

	// Game starts and player1 plays first
	int rounds = 0;  // count number of rounds
	while (true) {

		//get the player's input
		if (player == 1) {
			cout << "Player1's input: ";
			cin >> x >> y;
			if (x > 4 || y > 4 || x < 0 || y < 0) {
				cout << "Position out of bound!" << endl;
				continue;
			}
			if (chessboard[x][y] != 0) {
				cout << "Position occupied!" << endl;
				continue;
			}
			chessboard[x][y] = player;
			player = 2;
			rounds++;
		}
		else {
			cout << "Player2's input: ";
			cin >> x >> y;
			if (x > 4 || y > 4 || x < 0 || y < 0) {
				cout << "Position out of bound!" << endl;
				continue;
			}
			if (chessboard[x][y] != 0) {
				cout << "Position occupied!" << endl;
				continue;
			}
			chessboard[x][y] = player;
			player = 1;
			rounds++;
		}

		// Print the new chessboard after the player's input
		for (int i = 0; i < 5; i++) {
			for (int j = 0; j < 5; j++) {
				cout << chessboard[i][j];
			}
			cout << endl;
		}
		cout << endl;

		// Determine who wins or no one wins, and other operations (if needed).
		if (rounds >= 25) {
			cout << "Game is ended, but no one wins!" << endl;
		}
		// Check three types of lines: horizontal, vertical and diagnoal
		if (((chessboard[0][0] == 1) && (chessboard[0][1] == 1) && (chessboard[0][2] == 1) && (chessboard[0][3] == 1) && (chessboard[0][4] == 1)) ||
			((chessboard[1][0] == 1) && (chessboard[1][1] == 1) && (chessboard[1][2] == 1) && (chessboard[1][3] == 1) && (chessboard[1][4] == 1)) ||
			((chessboard[2][0] == 1) && (chessboard[2][1] == 1) && (chessboard[2][2] == 1) && (chessboard[2][3] == 1) && (chessboard[2][4] == 1)) ||
			((chessboard[3][0] == 1) && (chessboard[3][1] == 1) && (chessboard[3][2] == 1) && (chessboard[3][3] == 1) && (chessboard[3][4] == 1)) ||
			((chessboard[4][0] == 1) && (chessboard[4][1] == 1) && (chessboard[4][2] == 1) && (chessboard[4][3] == 1) && (chessboard[4][4] == 1)) ||
			((chessboard[0][0] == 1) && (chessboard[1][0] == 1) && (chessboard[2][0] == 1) && (chessboard[3][0] == 1) && (chessboard[4][0] == 1)) ||
			((chessboard[0][1] == 1) && (chessboard[1][1] == 1) && (chessboard[2][1] == 1) && (chessboard[3][1] == 1) && (chessboard[4][1] == 1)) ||
			((chessboard[0][2] == 1) && (chessboard[1][2] == 1) && (chessboard[2][2] == 1) && (chessboard[3][2] == 1) && (chessboard[4][2] == 1)) ||
			((chessboard[0][3] == 1) && (chessboard[1][3] == 1) && (chessboard[2][3] == 1) && (chessboard[3][3] == 1) && (chessboard[4][3] == 1)) ||
			((chessboard[0][4] == 1) && (chessboard[1][4] == 1) && (chessboard[2][4] == 1) && (chessboard[3][4] == 1) && (chessboard[4][4] == 1)) ||
			((chessboard[0][0] == 1) && (chessboard[1][1] == 1) && (chessboard[2][2] == 1) && (chessboard[3][3] == 1) && (chessboard[4][4] == 1))
			) {
			cout << "Player1 wins!";
			break;
		}
		if (((chessboard[0][0] == 2) && (chessboard[0][1] == 2) && (chessboard[0][2] == 2) && (chessboard[0][3] == 2) && (chessboard[0][4] == 2)) ||
			((chessboard[1][0] == 2) && (chessboard[1][1] == 2) && (chessboard[1][2] == 2) && (chessboard[1][3] == 2) && (chessboard[1][4] == 2)) ||
			((chessboard[2][0] == 2) && (chessboard[2][1] == 2) && (chessboard[2][2] == 2) && (chessboard[2][3] == 2) && (chessboard[2][4] == 2)) ||
			((chessboard[3][0] == 2) && (chessboard[3][1] == 2) && (chessboard[3][2] == 2) && (chessboard[3][3] == 2) && (chessboard[3][4] == 2)) ||
			((chessboard[4][0] == 2) && (chessboard[4][1] == 2) && (chessboard[4][2] == 2) && (chessboard[4][3] == 2) && (chessboard[4][4] == 2)) ||
			((chessboard[0][0] == 2) && (chessboard[1][0] == 2) && (chessboard[2][0] == 2) && (chessboard[3][0] == 2) && (chessboard[4][0] == 2)) ||
			((chessboard[0][1] == 2) && (chessboard[1][1] == 2) && (chessboard[2][1] == 2) && (chessboard[3][1] == 2) && (chessboard[4][1] == 2)) ||
			((chessboard[0][2] == 2) && (chessboard[1][2] == 2) && (chessboard[2][2] == 2) && (chessboard[3][2] == 2) && (chessboard[4][2] == 2)) ||
			((chessboard[0][3] == 2) && (chessboard[1][3] == 2) && (chessboard[2][3] == 2) && (chessboard[3][3] == 2) && (chessboard[4][3] == 2)) ||
			((chessboard[0][4] == 2) && (chessboard[1][4] == 2) && (chessboard[2][4] == 2) && (chessboard[3][4] == 2) && (chessboard[4][4] == 2)) ||
			((chessboard[0][0] == 1) && (chessboard[1][1] == 2) && (chessboard[2][2] == 2) && (chessboard[3][3] == 2) && (chessboard[4][4] == 2))
			) {
			cout << "Player2 wins!";
			break;
		}
	}
	return 0;
}
