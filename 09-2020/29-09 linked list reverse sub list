大體上同2前面個一樣，多左個reverse sub linked list
例如個list係， 1,2,3,4,5,6
reverse(2,5)嘅話就係將node[2,5] reverse，其他不變
用取巧方法，先用ptr去到2果個位，再用第二ptr(start)記錄呢個位置，後面會用到
將2去到5全部加入vector入面，reverse vector
用翻start呢個ptr，重新traverse一次node[2,5]，並將入面嘅tag換做vector入面嘅elements
搞掂

#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

class Node
{
public:
    Node* next;
    int tag;
    Node(int t) : next(NULL), tag(t)
    {
    };
};

class CircularLinkedList
{
private:
    Node* head;
public:
    CircularLinkedList() : head(NULL)
    {
    }

    void add(int tag) {
        Node* temp = new Node(tag);
        if (head == NULL) {
            head = temp;
            temp->next = head;
        }
        else {
            Node* ptr = head;
            while (ptr->next != head)
                ptr = ptr->next;
            temp->next = head;
            ptr->next = temp;
        }
    }

    void append(int tag, int n) {
        Node* temp = new Node(tag);
        Node* ptr = head;
        for (int i = 1; i < n; i++)
            ptr = ptr->next;
        temp->next = ptr->next;
        ptr->next = temp;
    }

    void del(int n) {
        Node* ptr = head;
        if (n == 1) {  // delete the first node, traverse to the last node first
            while (ptr->next != head)
                ptr = ptr->next;
            head = ptr->next->next;
            ptr->next = ptr->next->next;
        }
        else {
            for (int i = 1; i < n - 1; i++)
                ptr = ptr->next;
            ptr->next = ptr->next->next;
        }
    }

    void print(int n) {
        Node* ptr = head;
        for (int i = 1; i < n; i++)
            ptr = ptr->next;
        cout << ptr->tag << endl;
    }

    void reverse(int i, int j) {
        // copy those number to an temp arr[]
        // reverse the array
        // put them into node->tag
        vector<int> v;
        Node* ptr = head;
        Node* start = NULL;
        for (int x = 1; x < i; x++)
            ptr = ptr->next;
        start = ptr;  // for later usage
        for (int x = 0; x <= (j-i); x++) {
            v.push_back(ptr->tag);
            ptr = ptr->next;
        }
        std::reverse(v.begin(), v.end());
        for (int x = 0; x <= (j - i); x++) {
            start->tag = v[x];
            start = start->next;
        }
        
    }

};

int main()
{
    int N;
    cin >> N;
    CircularLinkedList ll;
    while (N--) {
        int x;
        cin >> x;
        ll.add(x);
    }
    int Q;
    cin >> Q;
    int choice, n;
    while (Q--) {
        cin >> choice;
        switch (choice) {
        case 1:
            int tag;
            cin >> n;
            cin >> tag;
            ll.append(tag, n);
            break;
        case 2:
            cin >> n;
            ll.del(n);
            break;
        case 3:
            int i, j;
            cin >> i >> j;
            ll.reverse(i, j);
            break;
        case 4:
            cin >> n;
            ll.print(n);
            break;
        default:
            break;
        }
    }
    return 0;
}
